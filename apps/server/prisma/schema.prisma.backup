// apps/server/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Run tracking
// ============================================================================

model Run {
  id            String    @id @default(cuid())
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  configJson    Json      // Full config snapshot
  configHash    String    // SHA of sorted config keys
  factorVersion Int       // Factor registry version
  
  // Relations
  quotes        Quote[]
  trades        Trade[]
  inventorySnapshots InventorySnapshot[]
  riskMetrics   RiskMetrics[]
  events        Event[]
  
  @@index([startedAt])
  @@index([configHash])
}

// ============================================================================
// Quotes
// ============================================================================

model Quote {
  id        String   @id @default(cuid())
  runId     String
  run       Run      @relation(fields: [runId], references: [id])
  
  ts        DateTime @default(now())
  symbol    String
  expiryMs  BigInt
  strike    Float
  
  // Pricing
  theoRaw   Float
  theoInv   Float
  skew      Float
  bid       Float
  ask       Float
  sizeBid   Float
  sizeAsk   Float
  
  // Market data context
  mid       Float
  
  // Factor greeks: { version, labels, values }
  gJson     Json
  
  // Spread components: { fee, noise, model, inventory, total }
  spreadJson Json
  
  // Diagnostics
  gLambdaG  Float
  invUtil   Float    // Inventory utilization
  
  // Factor contributions (optional): [(Λg).*g]
  factorContribJson Json?
  
  @@index([runId, ts])
  @@index([symbol, ts])
}

// ============================================================================
// Trades
// ============================================================================

model Trade {
  id        String   @id @default(cuid())
  runId     String
  run       Run      @relation(fields: [runId], references: [id])
  
  ts        DateTime @default(now())
  symbol    String
  side      String   // "buy" | "sell"
  qty       Float
  price     Float
  
  // Market context at fill
  F         Float    // Underlying price
  K         Float    // Strike
  expiryMs  BigInt
  
  // Risk at fill
  gJson     Json     // Factor greeks
  dotLamG   Float    // λ·g (inventory cost)
  gLambdaG  Float    // gᵀΛg (quadratic penalty)
  
  // PnL attribution
  pnlEst    Float    // Estimated PnL (edge - cost)
  edge      Float?   // Theo vs fill price
  
  @@index([runId, ts])
  @@index([symbol, ts])
}

// ============================================================================
// Inventory snapshots
// ============================================================================

model InventorySnapshot {
  id        String   @id @default(cuid())
  runId     String
  run       Run      @relation(fields: [runId], references: [id])
  
  ts        DateTime @default(now())
  symbol    String
  
  // Factor inventory: { version, labels, values }
  IJson     Json
  
  // Lambda vector: λ = ΛI
  lambdaJson Json
  
  // Aggregates
  notional  Float    // Total notional exposure
  vega      Float    // Net vega
  gamma     Float    // Net gamma
  
  // Risk metrics
  invNorm   Float    // ||I||_Λ
  invUtil   Float    // ||I||_Λ / L
  
  @@index([runId, ts])
  @@index([symbol, ts])
}

// ============================================================================
// Risk metrics (covariance & parameters)
// ============================================================================

model RiskMetrics {
  id        String   @id @default(cuid())
  runId     String
  run       Run      @relation(fields: [runId], references: [id])
  
  ts        DateTime @default(now())
  symbol    String
  
  // Covariance state
  horizonMs Int
  SigmaJson Json     // { version, labels, matrix }
  
  // Diagnostics
  traceValue Float
  condNumber Float
  isPD       Boolean
  minDiag    Float
  maxDiag    Float
  samples    Int
  
  // Parameters at this snapshot
  gamma      Float
  z          Float
  eta        Float
  kappa      Float
  L          Float
  ridgeEps   Float
  
  @@index([runId, ts])
  @@index([symbol, ts])
}

// ============================================================================
// Events (warnings, errors, regime changes)
// ============================================================================

model Event {
  id        String   @id @default(cuid())
  runId     String
  run       Run      @relation(fields: [runId], references: [id])
  
  ts        DateTime @default(now())
  level     String   // "info" | "warn" | "error"
  code      String   // e.g. "SIGMA_ILL_CONDITIONED", "INVENTORY_LIMIT"
  message   String
  
  // Optional structured metadata
  metaJson  Json?
  
  @@index([runId, ts])
  @@index([level, ts])
  @@index([code])
}